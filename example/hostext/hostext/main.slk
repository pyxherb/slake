module hostext;

use {
	externs = hostext.extfns
}

class AnotherGeneric<T, U> {
	class ChildGeneric<V, T> {
		pub T x;

		pub void setX(T x) {
			this.x = x;
			return;
		}

		T getX() {
			hostext.extfns.print("Fetched x: ", this.x, "\n");
			return this.x;
		}
	}
}

class Test {
	pub i32 x;
	pub Test lab;

	pub operator delete() {
		hostext.extfns.print("Destructing Test...\n");
		return;
	}

	pub operator new(i32 x) {
		this.x = x;
		return;
	}

	i32 getX() {
		hostext.extfns.print("Fetched x: ", this.x, "\n");
		return this.x;
	}
}

class Derived(Test) {
	pub i32 y;

	pub operator delete() {
		hostext.extfns.print("Destructing Derived...\n");
		return;
	}

	pub operator new(i32 y) {
		base.x = y * 2;
		this.x = y * 4;
		return;
	}

	i32 getY() {
		hostext.extfns.print("Fetched y: ", this.y, "\n");
		return this.y;
	}
}

class AnotherDerived(Derived) {
	pub i32 z;

	pub operator new(i32 z) {
		this.z = z;
		base.x = z * 4;
		base.y = z * 2;
		return;
	}

	i32 getZ() {
		hostext.extfns.print("Fetched z: ", this.z, "\n");
		return this.y;
	}
}

class Unrelated {
}

pub i32 main() {
	hostext.extfns.print("Entered main\n");

	AnotherGeneric<i32, f32>.ChildGeneric<f32, i32> x = new AnotherGeneric<i32, f32>.ChildGeneric<f32, i32>();
	x.setX(123);
	x.getX();

	Test test = new Derived(50);
	test.lab = test;
	test.lab.lab.getX();

	while(test.x = test.x - 1) {
		hostext.extfns.print("Yielded\n");
		yield test.getX();
	}

	return 114514;
}
