module hostext;

use {
	externs = hostext.extfns
}

class Generic<T> {
	pub T x;

	pub operator delete() {
		hostext.extfns.print("Destructing Geneirc...\n");
		hostext.extfns.print("x = ", this.x, "\n");
		return;
	}

	pub void setX(T x) {
		this.x = x;
		return;
	}

	T getX() {
		hostext.extfns.print("Fetched x: ", this.x, "\n");
		return this.x;
	}
	
	void test<T>(T x) {
		hostext.extfns.print(x, "\n");
		return;
	}
}

class Test {
	pub i32 x;

	pub operator delete() {
		hostext.extfns.print("Destructing Test...\n");
		return;
	}

	pub operator new(i32 x) {
		this.x = x;
		return;
	}

	i32 getX() {
		hostext.extfns.print("Fetched x: ", this.x, "\n");
		return this.x;
	}
}

class Derived(Test) {
	pub i32 y;

	pub operator delete() {
		hostext.extfns.print("Destructing Derived...\n");
		return;
	}

	pub operator new(i32 y) {
		base.x = y * 2;
		this.x = y * 4;
		return;
	}

	i32 getY() {
		hostext.extfns.print("Fetched y: ", this.y, "\n");
		return this.y;
	}
}

class AnotherDerived(Derived) {
	pub i32 z;

	pub operator new(i32 z) {
		this.z = z;
		base.x = z * 4;
		base.y = z * 2;
		return;
	}

	i32 getZ() {
		hostext.extfns.print("Fetched z: ", this.z, "\n");
		return this.y;
	}
}

class Unrelated {
}

bool testX() {
	hostext.extfns.print("Called testX\n");
	return false;
}

bool testY() {
	hostext.extfns.print("Called testY\n");
	return false;
}

pub i32 main() {
	hostext.extfns.print("Entered main\n");

	Generic<i32> a = new Generic<i32>();
	a.setX(123);
	Generic<f32> b = new Generic<f32>();
	b.setX(123.0f);

	Test test = new Derived(50);

	while(test.x = test.x - 1) {
		hostext.extfns.print("Yielded\n");
		yield test.getX();
	}

	a.test<f32>(123.456f);
	b.test<i32>(123);

	if(testX() || testY())
		hostext.extfns.print("Result = true\n");
	else
		hostext.extfns.print("Result = false\n");

	return 114514;
}
