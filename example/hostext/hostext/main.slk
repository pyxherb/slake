module hostext;

import {
	hostext.extfns
}

class AnotherGeneric<X, U> {
	class ChildGeneric<V, T(Test)> {
		pub let xyz: i32;

		pub fn _setX(T abc) {
			this.xyz = abc.getX();
			extfns.print("[ChildGeneric]setX: ", this.xyz, "\n");
			return;
		}

		pub fn _getX(): i32 {
			extfns.print("[ChildGeneric]Fetched xyz: ", this.xyz, "\n");
			return this.xyz;
		}
	}
}

class Test {
	pub let x: i32;
	pub let lab: Test;

	pub fn delete() {
		extfns.print("Destructing Test...\n");
		return;
	}

	pub fn new(i32 x) {
		this.x = x;
		return;
	}

	pub fn getX(): i32 {
		extfns.print("Fetched x: ", this.x, "\n");
		return this.x;
	}

	pub fn test(i32 &x) {
		x = 114514;
		return;
	}
	
	pub operator +(i32 rhs) : i32 {
		return this.x + rhs;
	}
}

class Derived(Test) {
	pub let y: i32;

	pub fn delete() {
		extfns.print("Destructing Derived...\n");
		return;
	}

	pub fn new(i32 y) {
		this.x = y * 2;
		this.x = y * 4;
		return;
	}

	pub fn getY(): i32 {
		extfns.print("Fetched y: ", this.y, "\n");
		return this.y;
	}
}

pub fn main() async: i32 {
	hostext.extfns.print("Entered main\n");
	
	let test: Test = new Derived(50);
	test.lab = test;

	let x: AnotherGeneric<i32, f32>.ChildGeneric<f32, Test> = new AnotherGeneric<i32, f32>.ChildGeneric<f32, Test>();
	x._setX(test);
	x._getX();

	extfns.print(test + 123);

	let v : i32 = 1919810;
	test.test(v);

	extfns.print("Value:", v, "\n");

	let array: i32[] = new i32[](32);

	while(test.x = test.x - 1) {
		extfns.print("Yielded\n");
		yield test.getX();
	}

	return 114514;
}
