module hostext;

use {
	externs = hostext.extfns
}

class Generic<T> {
	pub T x;

	pub operator delete() {
		hostext.extfns.print("Destructing Geneirc...\n");
		hostext.extfns.print("x = ", this.x, "\n");
		return;
	}

	pub void setX(T x) {
		this.x = x;
		return;
	}

	T getX() {
		hostext.extfns.print("Fetched x: ", this.x, "\n");
		return this.x;
	}
	
	void test<T>(T x) {
		hostext.extfns.print(x, "\n");
		return;
	}

	Generic<T> operator+(Generic<T> other) {
		hostext.extfns.print("Called +, lhs = ", this.x, ", rhs = ", other.x, "\n");
		return this;
	}
}

pub i32 main() {
	hostext.extfns.print("Entered main\n");

	Generic<i32> a = new Generic<i32>();
	a.setX(123);
	Generic<f32> b = new Generic<f32>();
	b.setX(123.0f);

	a.test<f32>(123.456f);
	b.test<i32>(123);

	a + a;
	b + b;

	yield 1;

	return 114514;
}
