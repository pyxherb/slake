module hostext;

import {
	hostext.extfns
}

pub let g_globalVar: Test;

class Test {
	static let n : f32;

	pub let x: i32;
	pub let lab: Test;

	pub operator delete() {
		return;
	}

	pub operator new(i32 x) {
		this.x = x;
		return;
	}

	pub fn getX(): i32 {
		return this.x;
	}
}

class Derived(Test) {
	pub let y: i32;
	pub let bal : Derived;

	pub operator delete() {
		return;
	}

	pub operator new(i32 y) {
		this.x = y * 2;
		this.x = y * 4;
		return;
	}

	pub fn getY(): i32 {
		return this.y;
	}

	pub operator+(i32 x) : i32 {
		return this.x + x;
	}

	pub operator+(f32 x, Test t) : f32 {
		return this.x + x;
	}

	pub fn getX() : i32 {
		return this.y;
	}
}

class Unrelated {
}

pub fn main() async : i32 {
	let x : Derived = new Derived(123);
	x.getX();

	return 114514;
}
