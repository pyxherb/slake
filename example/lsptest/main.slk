module hostext;

pub let g_globalVar: Test;

class AnotherGeneric<T, U> {
	pub let n : T;

	class ChildGeneric<V, T> {
		pub let x: T;

		pub fn setX(T x) {
			this.x = x;
			g_globalVar.lab.x;
			return;
		}

		pub fn getX(): T {
			return this.x;
		}
	}
}

class Test {
	pub let x: i32;
	pub let lab: Test;

	pub operator delete() {
		return;
	}

	pub operator new(i32 x) {
		this.x = x;
		return;
	}

	pub fn getX(): i32 {
		return this.x;
	}
}

class Derived(Test) {
	pub let y: i32;
	pub let bal : Derived;

	pub operator delete() {
		return;
	}

	pub operator new(i32 y) {
		base.x = y * 2;
		this.x = y * 4;
		return;
	}

	pub fn getY(): i32 {
		return this.y;
	}
}

class AnotherDerived(Derived) {
	pub let z: i32;

	pub operator new(i32 z) {
		this.z = z;
		base.x = z * 4;
		base.y = z * 2;
		return;
	}

	pub fn getZ(): i32 {
		return this.y;
	}
}

class Unrelated {
}

pub fn main() : i32 {
	let x: AnotherGeneric<i32, f32>.ChildGeneric<f32, i32> = new AnotherGeneric<i32, f32>.ChildGeneric<f32, i32>();
	x.setX(123);
	x.getX();

	let test: Test = new Derived(50);
	test.lab = test;
	test.lab.lab.x;

	let s: Derived;
	s.bal.bal.lab;

	while(test.x = test.x - 1) {
		yield test.getX();
	}

	return 114514;
}
