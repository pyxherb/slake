module hostext;

class AnotherGeneric<T, U> {
	class ChildGeneric<V, T> {
		pub T data;

		pub void setX(T data) {
			this.data = data;
			return;
		}

		T getX() {
			return this.data;
		}
	}
}

class Test {
	pub i32 x;

	pub operator delete() {
		return;
	}

	pub operator new(i32 x) {
		this.x = x;
		return;
	}

	i32 getX() {
		return this.x;
	}
}

class Derived(Test) {
	pub i32 y;

	pub operator delete() {
		return;
	}

	pub operator new(i32 y) {
		base.x = y * 2;
		this.x = y * 4;
		return;
	}

	i32 getY() {
		return this.y;
	}
}

class AnotherDerived(Derived) {
	pub i32 z;

	pub operator new(i32 z) {
		this.z = z;
		base.x = z * 4;
		base.y = z * 2;
		return;
	}

	i32 getZ() {
		return this.y;
	}
}

class Unrelated {
}

pub i32 main() {
	AnotherGeneric<i32, f32>.ChildGeneric<f32, i32> x = new AnotherGeneric<i32, f32>.ChildGeneric<f32, i32>();
	x.setX(123);
	x.getX();

	Test test = new Derived(50);

	while(test.x = test.x - 1) {
		yield test.getX();
	}

	return 114514;
}
