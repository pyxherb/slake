module rbtree;

pub interface ILesserOp<T> {
	pub operator<(other: T): bool;
}

pub interface IGreaterOp<T> {
	pub operator>(other: T): bool;
}

pub class RBTree<T: ILesserOp<T> | IGreaterOp<T>> {
	class Node {
		let l: Node, r: Node, p: Node;
		let value: T;
		let color: bool;
	}

	let _root: Node;
	let _cachedMinNode: Node, _cachedMaxNode: Node;
	let _nNodes: i32;

	static fn _getMinNode(node: Node) : Node {
		if(node === null)
			return node;

		while (node.l !== null)
			node = node.l;
		return node;
	}
	
	static fn _getMaxNode(node: Node) : Node {
		if (node === null)
			return node;

		while (node.r !== null)
			node = node.r;
		return node;
	}

	static fn _isRed(node: Node) : bool {
		return (node !== null) && (node.color == true);
	}

	static fn _isBlack(node: Node): bool {
		return (node === null) || (node.color == false);
	}

	fn _lRot(x: Node) {
		let y: Node = x.r;

		x.r = y.l;
		if (y.l)
			y.l.p = x;

		y.p = x.p;

		if (x.p === null)
			this._root = y;
		else if (x.p.l === x)
			x.p.l = y;
		else
			x.p.r = y;

		y.l = x;
		x.p = y;
	}

	fn _rRot(x: Node) {
		let y: Node = x.l;

		x.l = y.r;
		if (y.r)
			y.r.p = x;

		y.p = x.p;
		if(x.p === null)
			this._root = y;
		else if (x.p.l === x)
			x.p.l = y;
		else
			x.p.r = y;

		y.r = x;
		x.p = y;
	}

	fn _get(value: T): Node {
		let i: Node = this._root;

		while (i !== null) {
			if (i.value < value)
				i = i.r;
			else if (i.value > value)
				i = i.l;
			else
				return i;
		}

		return null;
	}

	fn _insertFixUp(node: Node) {
		let p: Node, gp: Node = node, u: Node;

		while (((p = gp.p) !== null) && this._isRed(p)) {
			gp = p.p;

			if (p === gp.l) {
				u = gp.r;

				if (this._isRed(u)) {
					p.color = false;
					u.color = false;
					gp.color = true;
					node = gp;
					continue;
				} else {
					if (node === p.r) {
						_lRot(p);

						let tmp : Node = node;
						node = p;
						p = tmp;
					}
					_rRot(gp);
					p.color = false;
					gp.color = true;
				}
			} else {
				u = gp.l;

				if (_isRed(u)) {
					p.color = false;
					u.color = false;
					gp.color = true;
					node = gp;
					continue;
				} else {
					if (node === p.l) {
						_rRot(p);

						let tmp : Node = node;
						node = p;
						p = tmp;
					}
					_lRot(gp);
					p.color = false;
					gp.color = true;
				}
			}
		}

		this._root.color = false;
	}

	fn _updateNodeCaches() {
		this._cachedMinNode = _getMinNode(this._root);
		this._cachedMaxNode = _getMaxNode(this._root);
	}

	fn _insert(node: Node) {
		if (this._root === null) {
			this._root = node;
			node.color = false;

			this._updateNodeCaches();
			++this._nNodes;

			return;
		}

		{
			let x: Node = this._root, y: Node;
			while (x !== null) {
				y = x;

				if (x.value > node.value)
					x = x.l;
				else if (x.value < node.value)
					x = x.r;
				else {
					/* TODO: Throw an error. */
				}
			}

			if (node.value < y.value)
				y.l = node;
			else
				y.r = node;

			node.p = y;
			node.color = true;

			this._insertFixUp(node);
		}
		
		this._updateNodeCaches();
		++this._nNodes;
	}

	pub fn new() {
		this._nNodes = 0;
	}
}

pub fn main() {
}
