module core.traits;

pub interface IAdd<T, Result> {
	operator +(rhs: T): Result;
}

pub interface ISub<T, Result> {
	operator -(rhs: T): Result;
}

pub interface IMul<T, Result> {
	operator *(rhs: T): Result;
}

pub interface IDiv<T, Result> {
	operator /(rhs: T): Result;
}

pub interface IMod<T, Result> {
	operator %(rhs: T): Result;
}

pub interface IAnd<T, Result> {
	operator &(rhs: T): Result;
}

pub interface IOr<T, Result> {
	operator |(rhs: T): Result;
}

pub interface IXor<T, Result> {
	operator ^(rhs: T): Result;
}

pub interface ILogicalAnd<T, Result> {
	operator &&(rhs: T): Result;
}

pub interface ILogicalOr<T, Result> {
	operator ||(rhs: T): Result;
}

pub interface ILsh<T, Result> {
	operator <<(rhs: T): Result;
}

pub interface IRsh<T, Result> {
	operator >>(rhs: T): Result;
}

pub interface IAssignAdd<T, Result> {
	operator +=(rhs: T): Result;
}

pub interface IAssignSub<T, Result> {
	operator -=(rhs: T): Result;
}

pub interface IAssignMul<T, Result> {
	operator *=(rhs: T): Result;
}

pub interface IAssignDiv<T, Result> {
	operator /=(rhs: T): Result;
}

pub interface IAssignMod<T, Result> {
	operator %=(rhs: T): Result;
}

pub interface IAssignAnd<T, Result> {
	operator &=(rhs: T): Result;
}

pub interface IAssignOr<T, Result> {
	operator |=(rhs: T): Result;
}

pub interface IAssignXor<T, Result> {
	operator ^=(rhs: T): Result;
}

pub interface IComparable<T> {
	fn compareTo(rhs: T): i32;
}
