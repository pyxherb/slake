module core.types;

use {
	core.traits
}

pub interface I32
	: traits.IAdd<i32, I32>, traits.IAdd<I32, I32>,
	traits.ISub<i32, I32>, traits.ISub<I32, I32>,
	traits.IMul<i32, I32>, traits.IMul<I32, I32>,
	traits.IDiv<i32, I32>, traits.IDiv<I32, I32>,
	traits.IMod<i32, I32>, traits.IMod<I32, I32>,
	traits.IAnd<i32, I32>, traits.IAnd<I32, I32>,
	traits.IOr<i32, I32>, traits.IOr<I32, I32>,
	traits.IXor<i32, I32>, traits.IXor<I32, I32>,
	traits.ILogicalAnd<i32, bool>, traits.ILogicalAnd<I32, bool>,
	traits.ILogicalOr<i32, bool>, traits.ILogicalOr<I32, bool>,
	traits.ILsh<u32, I32>, traits.ILsh<U32, I32>,
	traits.IRsh<u32, I32>, traits.IRsh<U32, I32>,
	traits.IComparable<i32>, traits.IComparable<I32> {
	pub native operator +(rhs: i32): I32;
	pub native operator +(rhs: I32): I32;

	pub native operator -(rhs: i32): I32;
	pub native operator -(rhs: I32): I32;

	pub native operator *(rhs: i32): I32;
	pub native operator *(rhs: I32): I32;

	pub native operator /(rhs: i32): I32;
	pub native operator /(rhs: I32): I32;

	pub native operator %(rhs: i32): I32;
	pub native operator %(rhs: I32): I32;
	
	pub native operator &(rhs: i32): I32;
	pub native operator &(rhs: I32): I32;
	
	pub native operator |(rhs: i32): I32;
	pub native operator |(rhs: I32): I32;
	
	pub native operator ^(rhs: i32): I32;
	pub native operator ^(rhs: I32): I32;
	
	pub native operator &&(rhs: i32): bool;
	pub native operator &&(rhs: I32): bool;
	
	pub native operator ||(rhs: i32): bool;
	pub native operator ||(rhs: I32): bool;
	
	pub native operator <<(rhs: u32): I32;
	pub native operator <<(rhs: U32): I32;
	
	pub native operator >>(rhs: u32): I32;
	pub native operator >>(rhs: U32): I32;

	pub native compareTo(rhs: i32): i32;
	pub native compareTo(rhs: I32): i32;
}
